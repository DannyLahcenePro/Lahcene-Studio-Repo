{"version":3,"file":"about-CDy3RCjV.js","sources":["../../project/js/about-animation.js"],"sourcesContent":["import * as THREE from 'three';\n\nclass AboutAnimation {\n    constructor() {\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        this.renderer = new THREE.WebGLRenderer({ \n            antialias: true, \n            alpha: true,\n            powerPreference: \"high-performance\"\n        });\n        this.points = [];\n        this.mouseX = 0;\n        this.mouseY = 0;\n        this.targetMouseX = 0;\n        this.targetMouseY = 0;\n        this.windowHalfX = window.innerWidth / 2;\n        this.windowHalfY = window.innerHeight / 2;\n        this.cameraTargetX = 0;\n        this.cameraTargetY = 0;\n        this.time = 0;\n        this.init();\n    }\n\n    init() {\n        // Configuration du renderer\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.setClearColor(0x000000, 0);\n        this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n        document.querySelector('main').appendChild(this.renderer.domElement);\n\n        // Position de la caméra\n        this.camera.position.z = 100;\n\n        // Création des points avec des tailles variées\n        const colors = [\n            new THREE.Color(0xFF5757).multiplyScalar(1.2), // Rouge plus vif\n            new THREE.Color(0x3527F8).multiplyScalar(1.2), // Bleu plus vif\n            new THREE.Color(0xE743CC).multiplyScalar(1.2)  // Rose plus vif\n        ];\n\n        // Création de plusieurs couches de points\n        const layers = [\n            { count: 150, radiusRange: [50, 150], sizeRange: [0.3, 0.8] },\n            { count: 100, radiusRange: [30, 80], sizeRange: [0.2, 0.5] },\n            { count: 50, radiusRange: [10, 40], sizeRange: [0.1, 0.3] }\n        ];\n\n        layers.forEach(layer => {\n            for (let i = 0; i < layer.count; i++) {\n                const size = Math.random() * (layer.sizeRange[1] - layer.sizeRange[0]) + layer.sizeRange[0];\n                const geometry = new THREE.SphereGeometry(size, 8, 8);\n                const material = new THREE.MeshBasicMaterial({\n                    color: colors[Math.floor(Math.random() * colors.length)],\n                    transparent: true,\n                    opacity: Math.random() * 0.5 + 0.25,\n                    blending: THREE.AdditiveBlending\n                });\n\n                const point = new THREE.Mesh(geometry, material);\n                \n                // Distribution sphérique améliorée\n                const radius = Math.random() * (layer.radiusRange[1] - layer.radiusRange[0]) + layer.radiusRange[0];\n                const theta = Math.random() * Math.PI * 2;\n                const phi = Math.acos((Math.random() * 2) - 1);\n                \n                point.position.x = radius * Math.sin(phi) * Math.cos(theta);\n                point.position.y = radius * Math.sin(phi) * Math.sin(theta);\n                point.position.z = radius * Math.cos(phi);\n\n                point.userData = {\n                    originalPosition: point.position.clone(),\n                    speed: Math.random() * 0.02 + 0.01,\n                    amplitude: Math.random() * 15 + 5,\n                    phase: Math.random() * Math.PI * 2,\n                    radius: radius,\n                    theta: theta,\n                    phi: phi,\n                    rotationSpeed: (Math.random() - 0.5) * 0.001,\n                    layer: layer.radiusRange[0] // Pour les effets basés sur la couche\n                };\n\n                this.points.push(point);\n                this.scene.add(point);\n            }\n        });\n\n        // Event listeners\n        window.addEventListener('resize', this.onResize.bind(this));\n        window.addEventListener('mousemove', this.onMouseMove.bind(this));\n        window.addEventListener('scroll', this.onScroll.bind(this));\n\n        // Démarrer l'animation\n        this.animate();\n    }\n\n    onResize() {\n        this.windowHalfX = window.innerWidth / 2;\n        this.windowHalfY = window.innerHeight / 2;\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    onMouseMove(event) {\n        this.targetMouseX = (event.clientX - this.windowHalfX) * 0.01;\n        this.targetMouseY = (event.clientY - this.windowHalfY) * 0.01;\n    }\n\n    onScroll() {\n        const scrollY = window.scrollY || window.pageYOffset;\n        this.camera.position.y = -(scrollY * 0.02);\n    }\n\n    updateCamera() {\n        // Mouvement fluide de la caméra\n        this.mouseX += (this.targetMouseX - this.mouseX) * 0.05;\n        this.mouseY += (this.targetMouseY - this.mouseY) * 0.05;\n\n        // Rotation douce de la caméra avec oscillation subtile\n        const time = Date.now() * 0.0005;\n        this.camera.position.x += (this.mouseX - this.camera.position.x) * 0.05 + Math.sin(time) * 0.5;\n        this.camera.position.y += (-this.mouseY - this.camera.position.y) * 0.05 + Math.cos(time) * 0.5;\n        this.camera.lookAt(this.scene.position);\n\n        // Légère rotation automatique\n        this.camera.position.x += Math.sin(time * 0.5) * 0.3;\n        this.camera.position.y += Math.cos(time * 0.5) * 0.3;\n    }\n\n    animate() {\n        requestAnimationFrame(this.animate.bind(this));\n        this.time += 0.01;\n\n        const time = Date.now() * 0.001;\n\n        // Animation des points avec effets de profondeur\n        this.points.forEach((point, index) => {\n            const userData = point.userData;\n\n            // Rotation autour du centre avec vitesse variable selon la couche\n            userData.theta += userData.rotationSpeed * (userData.layer / 50);\n            \n            // Position de base sur la sphère\n            const newX = userData.radius * Math.sin(userData.phi) * Math.cos(userData.theta);\n            const newY = userData.radius * Math.sin(userData.phi) * Math.sin(userData.theta);\n            const newZ = userData.radius * Math.cos(userData.phi);\n\n            // Mouvement ondulatoire complexe\n            const wave = Math.sin(time * userData.speed + userData.phase) * userData.amplitude;\n            const secondaryWave = Math.cos(time * userData.speed * 0.5) * (userData.amplitude * 0.3);\n            \n            point.position.set(\n                newX + Math.sin(time * 0.5 + userData.phase) * 2,\n                newY + wave + secondaryWave,\n                newZ + Math.cos(time * 0.5 + userData.phase) * 2\n            );\n\n            // Effet de pulsation sur la taille selon la profondeur\n            const distanceScale = 1 - (Math.abs(point.position.z) / 200);\n            const scale = (1 + Math.sin(time * userData.speed) * 0.3) * distanceScale;\n            point.scale.setScalar(scale);\n\n            // Effet de pulsation sur l'opacité avec profondeur\n            point.material.opacity = (0.25 + Math.sin(time * userData.speed + userData.phase) * 0.15) * distanceScale;\n        });\n\n        this.updateCamera();\n        this.renderer.render(this.scene, this.camera);\n    }\n}\n\n// Créer et exporter une instance\nconst aboutAnimation = new AboutAnimation();\nexport default aboutAnimation; "],"names":["AboutAnimation","THREE.Scene","THREE.PerspectiveCamera","THREE.WebGLRenderer","colors","THREE.Color","layer","i","size","geometry","THREE.SphereGeometry","material","THREE.MeshBasicMaterial","THREE.AdditiveBlending","point","THREE.Mesh","radius","theta","phi","event","scrollY","time","index","userData","newX","newY","newZ","wave","secondaryWave","distanceScale","scale"],"mappings":"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"}